generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                   @id @default(autoincrement())
  email                 String                @unique
  name                  String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  passwordHash          String?
  avatarUrl             String?
  provider              String                @default("local")
  providerId            String?
  emailVerifiedAt       DateTime?
  roles                 Json
  phoneNumber           String?
  phoneVerified         Boolean               @default(false)
  phoneVerifiedAt       DateTime?
  onboardingCompletedAt DateTime?
  adminUser             AdminUser?
  communityComments     CommunityComment[]
  communityLikes        CommunityLike[]
  communityPosts        CommunityPost[]
  consultationSummaries ConsultationSummary[]
  emailVerifications    EmailVerification[]
  expert                Expert?
  notifications         Notification[]
  paymentMethods        PaymentMethod[]
  phoneVerifications    PhoneVerification[]
  reservations          Reservation[]
  reviews               Review[]

  @@unique([provider, providerId])
}

model Expert {
  id                 Int                  @id @default(autoincrement())
  displayId          String               @unique
  name               String
  title              String?
  categories         Json
  bio                String?              @db.Text
  avatarUrl          String?              @db.Text
  ratingAvg          Float                @default(0)
  reviewCount        Int                  @default(0)
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  availability       Json
  avgSessionDuration Int                  @default(60)
  calculatedLevel    Int                  @default(1)
  cancellationPolicy String?
  certifications     Json
  completionRate     Int                  @default(95)
  consultationTypes  Json
  contactInfo        Json
  description        String?
  education          Json
  experience         Int                  @default(0)
  holidayPolicy      String?
  hourlyRate         Int                  @default(60000)
  isProfileComplete  Boolean              @default(false)
  isProfilePublic    Boolean              @default(true)
  joinedAt           DateTime             @default(now())
  languages          Json
  lastActiveAt       DateTime?
  level              String               @default("Iron (아이언)")
  levelUpdatedAt     DateTime             @default(now())
  mbti               String?
  portfolioFiles     Json
  portfolioItems     Json
  profileViews       Int                  @default(0)
  rankingScore       Float                @default(0)
  repeatClients      Int                  @default(0)
  reschedulePolicy   String?
  responseTime       String               @default("2시간 내")
  socialLinks        Json
  socialProof        Json
  specialties        Json
  specialty          String?
  totalSessions      Int                  @default(0)
  userId             Int?                 @unique
  experienceYears    Int                  @default(0)
  user               User?                @relation(fields: [userId], references: [id])
  availabilitySlots  ExpertAvailability[]
  categoryLinks      ExpertCategory[]
  reservations       Reservation[]
  reviews            Review[]

  @@index([ratingAvg], map: "idx_expert_ratingAvg")
  @@index([reviewCount], map: "idx_expert_reviewCount")
  @@index([experienceYears], map: "idx_expert_experienceYears")
  @@index([rankingScore], map: "idx_expert_rankingScore")
  @@index([totalSessions], map: "idx_expert_totalSessions")
}

model Category {
  id             Int              @id @default(autoincrement())
  description    String?
  icon           String?
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  nameEn         String?
  nameKo         String
  order          Int              @default(0)
  slug           String           @unique
  communityPosts CommunityPost[]
  expertLinks    ExpertCategory[]
}

model ExpertCategory {
  expertId   Int
  categoryId Int
  assignedAt DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id])
  expert     Expert   @relation(fields: [expertId], references: [id])

  @@id([expertId, categoryId])
  @@index([categoryId], map: "ExpertCategory_categoryId_fkey")
}

model Reservation {
  id        Int               @id @default(autoincrement())
  displayId String            @unique
  userId    Int
  expertId  Int
  startAt   DateTime
  endAt     DateTime
  status    ReservationStatus @default(PENDING)
  note      String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  cost      Int               @default(0)
  expert    Expert            @relation(fields: [expertId], references: [id])
  user      User              @relation(fields: [userId], references: [id])

  @@unique([expertId, startAt])
  @@index([userId, createdAt])
}

model PaymentIntent {
  id          Int           @id @default(autoincrement())
  displayId   String        @unique
  userId      Int
  amount      Int
  currency    String        @default("KRW")
  status      PaymentStatus @default(PENDING)
  provider    String        @default("toss")
  providerKey String?       @unique
  metadata    Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model CreditTransaction {
  id        Int      @id @default(autoincrement())
  userId    Int
  amount    Int
  reason    String
  refId     String?
  createdAt DateTime @default(now())

  @@unique([userId, reason, refId])
  @@index([userId, createdAt])
}

model Session {
  id            Int           @id @default(autoincrement())
  displayId     String        @unique
  reservationId Int
  channel       String        @unique
  status        SessionStatus @default(SCHEDULED)
  startedAt     DateTime?
  endedAt       DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  attachments   Json?
  duration      Int?
  recordingUrl  String?
  sessionNumber Int           @default(1)
  transcript    String?       @db.Text
  notes         SessionNote[]
}

model SessionNote {
  id        Int      @id @default(autoincrement())
  sessionId Int
  userId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  session   Session  @relation(fields: [sessionId], references: [id])

  @@unique([sessionId, userId])
}

model Review {
  id            Int      @id @default(autoincrement())
  displayId     String   @unique
  userId        Int
  expertId      Int
  reservationId Int      @unique
  rating        Int
  content       String
  isPublic      Boolean  @default(true)
  createdAt     DateTime @default(now())
  expert        Expert   @relation(fields: [expertId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expertId])
}

model ExpertApplication {
  id                Int                     @id @default(autoincrement())
  displayId         String                  @unique
  userId            Int
  name              String
  email             String
  jobTitle          String?
  specialty         String
  experienceYears   Int                     @default(0)
  bio               String
  keywords          Json
  consultationTypes Json
  availability      Json
  certifications    Json
  profileImage      String?                 @db.Text
  status            ExpertApplicationStatus @default(PENDING)
  reviewedAt        DateTime?
  reviewedBy        Int?
  reviewNotes       String?
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  currentStage      String?                 @default("SUBMITTED")

  @@index([userId, status])
  @@index([status, createdAt])
}

model EmailVerification {
  id         Int       @id @default(autoincrement())
  userId     Int
  codeHash   String
  expiresAt  DateTime
  consumedAt DateTime?
  createdAt  DateTime  @default(now())
  attempts   Int       @default(0)
  lastSentAt DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
}

model PhoneVerification {
  id          Int       @id @default(autoincrement())
  userId      Int?
  phoneNumber String
  code        String
  expiresAt   DateTime
  verifiedAt  DateTime?
  createdAt   DateTime  @default(now())
  attempts    Int       @default(0)
  user        User?     @relation(fields: [userId], references: [id])

  @@index([phoneNumber])
  @@index([expiresAt])
  @@index([userId])
}

model AIUsage {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique
  usedTokens       Int      @default(0)
  purchasedTokens  Int      @default(0)
  totalTurns       Int      @default(0)
  totalTokens      Int      @default(0)
  monthlyResetDate DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([userId])
  @@index([monthlyResetDate])
}

model ChatSession {
  id           String        @id @default(uuid())
  userId       Int
  title        String        @default("새로운 상담")
  totalTokens  Int           @default(0)
  totalCredits Float         @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  messages     ChatMessage[]

  @@index([userId, updatedAt])
}

model ChatMessage {
  id          String      @id @default(uuid())
  sessionId   String
  type        String
  content     String      @db.Text
  tokenCount  Int         @default(0)
  creditsUsed Float       @default(0)
  createdAt   DateTime    @default(now())
  session     ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, createdAt])
}

model Notification {
  id        Int                  @id @default(autoincrement())
  displayId String               @unique
  userId    Int
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean              @default(false)
  priority  NotificationPriority @default(MEDIUM)
  expiresAt DateTime?
  readAt    DateTime?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  user      User                 @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
  @@index([createdAt])
}

model PaymentMethod {
  id         Int               @id @default(autoincrement())
  userId     Int
  type       PaymentMethodType
  name       String
  last4      String?
  bankName   String?
  isDefault  Boolean           @default(false)
  expiryDate String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  user       User              @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ConsultationSummary {
  id              Int      @id @default(autoincrement())
  reservationId   Int      @unique
  summaryTitle    String
  summaryContent  String   @db.Text
  keyPoints       Json
  actionItems     Json
  recommendations Json
  followUpPlan    String?  @db.Text
  todoStatus      Json?
  attachments     Json?
  isPublic        Boolean  @default(true)
  createdBy       Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  creator         User     @relation(fields: [createdBy], references: [id])

  @@index([reservationId])
  @@index([createdBy])
  @@index([isPublic])
}

model CommunityPost {
  id                Int                @id @default(autoincrement())
  userId            Int
  categoryId        Int
  title             String
  content           String             @db.Text
  postType          CommunityPostType  @default(general)
  status            PostStatus         @default(published)
  isPinned          Boolean            @default(false)
  isAnonymous       Boolean            @default(false)
  views             Int                @default(0)
  likes             Int                @default(0)
  comments          Int                @default(0)
  tags              Json?
  attachments       Json?
  consultationId    Int?
  expertId          Int?
  publishedAt       DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  communityComments CommunityComment[]
  category          Category           @relation(fields: [categoryId], references: [id])
  user              User               @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([categoryId])
  @@index([postType])
  @@index([status])
  @@index([isPinned])
  @@index([publishedAt])
}

model CommunityComment {
  id               Int                @id @default(autoincrement())
  postId           Int
  userId           Int
  parentId         Int?
  content          String             @db.Text
  status           CommentStatus      @default(active)
  isAnonymous      Boolean            @default(false)
  likes            Int                @default(0)
  depth            Int                @default(0)
  order            Int                @default(1)
  expertSpecialty  String?
  expertLevel      String?
  expertExperience Int?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  parent           CommunityComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies          CommunityComment[] @relation("CommentReplies")
  post             CommunityPost      @relation(fields: [postId], references: [id])
  user             User               @relation(fields: [userId], references: [id])

  @@index([postId])
  @@index([userId])
  @@index([parentId])
  @@index([status])
}

model CommunityLike {
  id         Int            @id @default(autoincrement())
  userId     Int
  targetType LikeTargetType
  targetId   Int
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  user       User           @relation(fields: [userId], references: [id])

  @@unique([userId, targetType, targetId])
  @@index([targetType, targetId])
}

model ExpertAvailability {
  id        Int             @id @default(autoincrement())
  expertId  Int
  dayOfWeek ExpertDayOfWeek
  startTime String
  endTime   String
  isActive  Boolean         @default(true)
  timeZone  String          @default("Asia/Seoul")
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  expert    Expert          @relation(fields: [expertId], references: [id], onDelete: Cascade)

  @@unique([expertId, dayOfWeek, startTime, endTime])
  @@index([expertId])
  @@index([dayOfWeek])
}

model AdminUser {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  role        AdminRole @default(MODERATOR)
  permissions Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model DailyMetrics {
  id                    Int      @id @default(autoincrement())
  date                  DateTime @unique @db.Date
  newUsers              Int      @default(0)
  newExpertApplications Int      @default(0)
  approvedExperts       Int      @default(0)
  rejectedExperts       Int      @default(0)
  totalReservations     Int      @default(0)
  completedReservations Int      @default(0)
  canceledReservations  Int      @default(0)
  totalRevenue          Int      @default(0)
  avgReservationValue   Float    @default(0)
  activeUsers           Int      @default(0)
  newReviews            Int      @default(0)
  avgRating             Float    @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([date])
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  adminUserId Int
  action      String
  targetType  String
  targetId    Int
  details     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  @@index([adminUserId, createdAt])
  @@index([targetType, targetId])
  @@index([createdAt])
}

model PlatformSettings {
  id        Int      @id @default(autoincrement())
  category  String
  key       String
  value     Json
  dataType  String
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([category, key])
  @@index([category])
}

model SettingChangeLog {
  id          Int      @id @default(autoincrement())
  adminUserId Int
  category    String
  settingKey  String
  oldValue    Json?
  newValue    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  @@index([adminUserId, createdAt])
  @@index([category, settingKey])
  @@index([createdAt])
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
}

enum SessionStatus {
  SCHEDULED
  LIVE
  ENDED
  COMPLETED
  IN_PROGRESS
}

enum ExpertApplicationStatus {
  PENDING
  ADDITIONAL_INFO_REQUESTED
  APPROVED
  REJECTED
}

enum NotificationType {
  CONSULTATION_REQUEST
  CONSULTATION_ACCEPTED
  CONSULTATION_REJECTED
  CONSULTATION_COMPLETED
  PAYMENT_COMPLETED
  PAYMENT_FAILED
  CREDIT_PURCHASE_COMPLETED
  SYSTEM
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
}

enum PaymentMethodType {
  card
  bank
}

enum CommunityPostType {
  general
  consultation_review
  consultation_request
  expert_intro
}

enum PostStatus {
  draft
  published
  hidden
  deleted
}

enum CommentStatus {
  active
  hidden
  deleted
}

enum LikeTargetType {
  post
  comment
}

enum ExpertDayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  ANALYST
}
