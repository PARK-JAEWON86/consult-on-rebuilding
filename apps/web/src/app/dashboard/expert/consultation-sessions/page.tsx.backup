'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/components/auth/AuthProvider';

interface ConsultationSession {
  id: string;
  clientName: string;
  clientEmail: string;
  clientAvatar?: string;
  expertiseArea: string;
  consultationType: 'chat' | 'voice' | 'video';
  scheduledDate: string;
  scheduledTime: string;
  duration: number;
  status: 'upcoming' | 'ongoing' | 'completed' | 'cancelled';
  description: string;
  price: number;
  sessionUrl?: string;
  notes?: string;
  createdAt: string;
}

export default function ConsultationSessionsPage() {
  const router = useRouter();
  const { user, isLoading } = useAuth();
  const [sessions, setSessions] = useState<ConsultationSession[]>([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState<'all' | 'upcoming' | 'ongoing' | 'completed' | 'cancelled'>('all');

  useEffect(() => {
    if (!isLoading && !user) {
      router.push('/auth/login');
    }
  }, [user, isLoading, router]);

  useEffect(() => {
    // 임시 데이터 로드 (실제로는 API에서 가져옴)
    const loadSessions = () => {
      const mockSessions: ConsultationSession[] = [
        {
          id: '1',
          clientName: '김철수',
          clientEmail: 'kim@example.com',
          clientAvatar: '김',
          expertiseArea: '법률 상담',
          consultationType: 'video',
          scheduledDate: '2024-09-25',
          scheduledTime: '14:00',
          duration: 60,
          status: 'ongoing',
          description: '계약서 검토 및 법적 조언',
          price: 50000,
          sessionUrl: 'https://meet.example.com/session1',
          createdAt: '2024-09-23T10:00:00Z'
        },
        {
          id: '2',
          clientName: '이영희',
          clientEmail: 'lee@example.com',
          clientAvatar: '이',
          expertiseArea: '심리 상담',
          consultationType: 'voice',
          scheduledDate: '2024-09-25',
          scheduledTime: '16:00',
          duration: 45,
          status: 'upcoming',
          description: '스트레스 관리 상담',
          price: 40000,
          sessionUrl: 'https://call.example.com/session2',
          createdAt: '2024-09-23T11:30:00Z'
        },
        {
          id: '3',
          clientName: '박민수',
          clientEmail: 'park@example.com',
          clientAvatar: '박',
          expertiseArea: '투자 상담',
          consultationType: 'chat',
          scheduledDate: '2024-09-26',
          scheduledTime: '10:00',
          duration: 90,
          status: 'upcoming',
          description: '포트폴리오 리밸런싱',
          price: 75000,
          createdAt: '2024-09-22T14:20:00Z'
        },
        {
          id: '4',
          clientName: '정수연',
          clientEmail: 'jung@example.com',
          clientAvatar: '정',
          expertiseArea: '경영 컨설팅',
          consultationType: 'video',
          scheduledDate: '2024-09-24',
          scheduledTime: '13:00',
          duration: 120,
          status: 'completed',
          description: '사업 전략 수립',
          price: 100000,
          notes: '성공적으로 완료됨. 고객 만족도 높음.',
          createdAt: '2024-09-22T09:15:00Z'
        }
      ];
      setSessions(mockSessions);
      setLoading(false);
    };

    loadSessions();
  }, []);

  const handleJoinSession = (session: ConsultationSession) => {
    if (session.sessionUrl) {
      window.open(session.sessionUrl, '_blank');
    } else {
      alert('세션 링크가 생성되지 않았습니다.');
    }
  };

  const handleStartSession = async (sessionId: string) => {
    // 실제 API 호출로 교체해야 함
    setSessions(prev =>
      prev.map(session =>
        session.id === sessionId ? { ...session, status: 'ongoing' } : session
      )
    );
    alert('상담 세션이 시작되었습니다.');
  };

  const handleCompleteSession = async (sessionId: string) => {
    const notes = prompt('상담 세션에 대한 메모를 입력하세요:');
    // 실제 API 호출로 교체해야 함
    setSessions(prev =>
      prev.map(session =>
        session.id === sessionId
          ? { ...session, status: 'completed', notes: notes || '' }
          : session
      )
    );
    alert('상담 세션이 완료되었습니다.');
  };

  const filteredSessions = sessions.filter(session => {
    if (filter === 'all') return true;
    return session.status === filter;
  });

  const getStatusBadge = (status: ConsultationSession['status']) => {
    switch (status) {
      case 'upcoming':
        return <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">예정</span>;
      case 'ongoing':
        return <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">진행중</span>;
      case 'completed':
        return <span className="px-2 py-1 bg-gray-100 text-gray-800 text-xs rounded-full">완료</span>;
      case 'cancelled':
        return <span className="px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full">취소</span>;
    }
  };

  const getConsultationTypeText = (type: ConsultationSession['consultationType']) => {
    switch (type) {
      case 'chat': return '채팅 상담';
      case 'voice': return '음성 상담';
      case 'video': return '비디오 상담';
    }
  };

  const getConsultationIcon = (type: ConsultationSession['consultationType']) => {
    switch (type) {
      case 'chat':
        return (
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
          </svg>
        );
      case 'voice':
        return (
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
          </svg>
        );
      case 'video':
        return (
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
          </svg>
        );
    }
  };

  const isToday = (dateString: string) => {
    const today = new Date().toDateString();
    const sessionDate = new Date(dateString).toDateString();
    return today === sessionDate;
  };

  if (isLoading || loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">로딩 중...</p>
        </div>
      </div>
    );
  }

  if (!user) {
    return null;
  }

  return (
    <div className="max-w-7xl mx-auto px-10 py-10 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-blue-900">상담 세션</h1>
          <p className="text-blue-700 mt-1">
            예정된 상담 세션을 관리하고 참여하세요
          </p>
        </div>
        <div className="flex items-center space-x-4">
          <select
            value={filter}
            onChange={(e) => setFilter(e.target.value as any)}
            className="border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="all">전체</option>
            <option value="upcoming">예정</option>
            <option value="ongoing">진행중</option>
            <option value="completed">완료</option>
            <option value="cancelled">취소</option>
          </select>
        </div>
      </div>

      {/* 통계 카드 */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-white rounded-lg border border-blue-200 p-6">
          <div className="flex items-center">
            <div className="p-2 bg-blue-100 rounded-lg">
              <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
            </div>
            <div className="ml-4">
              <p className="text-sm text-gray-600">예정된 세션</p>
              <p className="text-2xl font-bold text-blue-900">
                {sessions.filter(s => s.status === 'upcoming').length}건
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg border border-green-200 p-6">
          <div className="flex items-center">
            <div className="p-2 bg-green-100 rounded-lg">
              <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
              </svg>
            </div>
            <div className="ml-4">
              <p className="text-sm text-gray-600">진행 중</p>
              <p className="text-2xl font-bold text-green-900">
                {sessions.filter(s => s.status === 'ongoing').length}건
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg border border-gray-200 p-6">
          <div className="flex items-center">
            <div className="p-2 bg-gray-100 rounded-lg">
              <svg className="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
            </div>
            <div className="ml-4">
              <p className="text-sm text-gray-600">완료된 세션</p>
              <p className="text-2xl font-bold text-gray-900">
                {sessions.filter(s => s.status === 'completed').length}건
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg border border-purple-200 p-6">
          <div className="flex items-center">
            <div className="p-2 bg-purple-100 rounded-lg">
              <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
              </svg>
            </div>
            <div className="ml-4">
              <p className="text-sm text-gray-600">오늘 수익</p>
              <p className="text-2xl font-bold text-purple-900">
                ₩{sessions.filter(s => s.status === 'completed' && isToday(s.scheduledDate)).reduce((sum, s) => sum + s.price, 0).toLocaleString()}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* 오늘의 세션 하이라이트 */}
      {sessions.some(s => isToday(s.scheduledDate) && (s.status === 'upcoming' || s.status === 'ongoing')) && (
        <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-6 border border-blue-200">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">오늘의 상담 세션</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {sessions
              .filter(s => isToday(s.scheduledDate) && (s.status === 'upcoming' || s.status === 'ongoing'))
              .map(session => (
                <div key={session.id} className="bg-white rounded-lg p-4 border border-blue-200">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-medium text-gray-900">{session.clientName}</h4>
                    {getStatusBadge(session.status)}
                  </div>
                  <p className="text-sm text-gray-600 mb-2">{session.description}</p>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2 text-sm text-gray-500">
                      {getConsultationIcon(session.consultationType)}
                      <span>{session.scheduledTime}</span>
                      <span>({session.duration}분)</span>
                    </div>
                    {session.status === 'upcoming' && (
                      <button
                        onClick={() => handleStartSession(session.id)}
                        className="px-3 py-1 bg-blue-600 text-white text-xs rounded-md hover:bg-blue-700 transition-colors"
                      >
                        시작
                      </button>
                    )}
                    {session.status === 'ongoing' && (
                      <button
                        onClick={() => handleJoinSession(session)}
                        className="px-3 py-1 bg-green-600 text-white text-xs rounded-md hover:bg-green-700 transition-colors"
                      >
                        참여
                      </button>
                    )}
                  </div>
                </div>
              ))}
          </div>
        </div>
      )}

      {/* 상담 세션 목록 */}
      <div className="bg-white rounded-lg border border-gray-200">
        <div className="px-6 py-4 border-b border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900">상담 세션 목록</h3>
        </div>
        <div className="divide-y divide-gray-200">
          {filteredSessions.length === 0 ? (
            <div className="p-6 text-center text-gray-500">
              {filter === 'all' ? '상담 세션이 없습니다.' : `${filter === 'upcoming' ? '예정된' : filter === 'ongoing' ? '진행 중인' : filter === 'completed' ? '완료된' : '취소된'} 세션이 없습니다.`}
            </div>
          ) : (
            filteredSessions.map((session) => (
              <div key={session.id} className="p-6 hover:bg-gray-50">
                <div className="flex items-start justify-between">
                  <div className="flex items-start space-x-4 flex-1">
                    <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center text-blue-600 font-semibold">
                      {session.clientAvatar || session.clientName[0]}
                    </div>
                    <div className="flex-1">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center space-x-3">
                          <h4 className="text-lg font-medium text-gray-900">{session.clientName}</h4>
                          {getStatusBadge(session.status)}
                          {isToday(session.scheduledDate) && (
                            <span className="px-2 py-1 bg-yellow-100 text-yellow-800 text-xs rounded-full">오늘</span>
                          )}
                        </div>
                        <div className="text-right">
                          <p className="text-lg font-bold text-blue-600">₩{session.price.toLocaleString()}</p>
                          <p className="text-sm text-gray-500">{session.duration}분</p>
                        </div>
                      </div>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                        <div>
                          <p className="text-sm text-gray-600">상담 분야: <span className="font-medium">{session.expertiseArea}</span></p>
                          <p className="text-sm text-gray-600">상담 방식: <span className="font-medium">{getConsultationTypeText(session.consultationType)}</span></p>
                          <p className="text-sm text-gray-600">이메일: <span className="font-medium">{session.clientEmail}</span></p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-600">날짜: <span className="font-medium">{session.scheduledDate}</span></p>
                          <p className="text-sm text-gray-600">시간: <span className="font-medium">{session.scheduledTime}</span></p>
                          <p className="text-sm text-gray-600">신청일: <span className="font-medium">{new Date(session.createdAt).toLocaleDateString('ko-KR')}</span></p>
                        </div>
                      </div>
                      <p className="text-sm text-gray-600 mb-3">{session.description}</p>
                      {session.notes && (
                        <div className="mb-3">
                          <p className="text-sm text-gray-600 mb-1">메모:</p>
                          <p className="text-sm bg-gray-50 p-2 rounded-md">{session.notes}</p>
                        </div>
                      )}
                      <div className="flex space-x-3">
                        {session.status === 'upcoming' && (
                          <>
                            <button
                              onClick={() => handleStartSession(session.id)}
                              className="px-4 py-2 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700 transition-colors"
                            >
                              세션 시작
                            </button>
                          </>
                        )}
                        {session.status === 'ongoing' && (
                          <>
                            <button
                              onClick={() => handleJoinSession(session)}
                              className="px-4 py-2 bg-green-600 text-white text-sm rounded-md hover:bg-green-700 transition-colors"
                            >
                              세션 참여
                            </button>
                            <button
                              onClick={() => handleCompleteSession(session.id)}
                              className="px-4 py-2 bg-gray-600 text-white text-sm rounded-md hover:bg-gray-700 transition-colors"
                            >
                              완료
                            </button>
                          </>
                        )}
                        {session.status === 'completed' && (
                          <div className="flex items-center space-x-2 text-sm text-gray-500">
                            <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                            </svg>
                            <span>상담 완료</span>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
}