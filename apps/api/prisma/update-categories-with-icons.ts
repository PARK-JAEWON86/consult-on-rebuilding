import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// Full category data from 01_categories.sql with icon names (not emojis)
const categoryData = [
  {
    id: 1,
    slug: 'psychology',
    nameKo: 'Ïã¨Î¶¨ÏÉÅÎã¥',
    nameEn: 'Psychology Counseling',
    icon: 'Brain',
    description: 'Ïä§Ìä∏Î†àÏä§, Ïö∞Ïö∏, Î∂àÏïà Îì± Ïã¨Î¶¨ Í±¥Í∞ï Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 1,
    isActive: true,
  },
  {
    id: 2,
    slug: 'legal',
    nameKo: 'Î≤ïÎ•†ÏÉÅÎã¥',
    nameEn: 'Legal Advice',
    icon: 'Scale',
    description: 'Í≥ÑÏïΩ, Î∂ÑÏüÅ, ÏÉÅÏÜç Îì± Î≤ïÎ•† Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 2,
    isActive: true,
  },
  {
    id: 3,
    slug: 'finance',
    nameKo: 'Ïû¨Î¨¥ÏÉÅÎã¥',
    nameEn: 'Financial Planning',
    icon: 'DollarSign',
    description: 'Ìà¨Ïûê, ÏûêÏÇ∞Í¥ÄÎ¶¨, ÏÑ∏Î¨¥ Îì± Ïû¨Î¨¥ Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 3,
    isActive: true,
  },
  {
    id: 4,
    slug: 'health',
    nameKo: 'Í±¥Í∞ïÏÉÅÎã¥',
    nameEn: 'Health Consultation',
    icon: 'Heart',
    description: 'ÏòÅÏñë, Ïö¥Îèô, Í±¥Í∞ïÍ¥ÄÎ¶¨ Îì± Í±¥Í∞ï Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 4,
    isActive: true,
  },
  {
    id: 5,
    slug: 'career',
    nameKo: 'ÏßÑÎ°úÏÉÅÎã¥',
    nameEn: 'Career Guidance',
    icon: 'Target',
    description: 'Ï∑®ÏóÖ, Ïù¥ÏßÅ, ÏßÑÎ°ú ÌÉêÏÉâ Îì± ÏßÑÎ°ú Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 5,
    isActive: true,
  },
  {
    id: 6,
    slug: 'it',
    nameKo: 'ITÏÉÅÎã¥',
    nameEn: 'IT Consultation',
    icon: 'Code',
    description: 'ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç, ÏÜåÌîÑÌä∏Ïõ®Ïñ¥ Í∞úÎ∞ú Îì± IT Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 6,
    isActive: true,
  },
  {
    id: 7,
    slug: 'education',
    nameKo: 'ÍµêÏú°ÏÉÅÎã¥',
    nameEn: 'Educational Counseling',
    icon: 'BookOpen',
    description: 'ÌïôÏäµÎ≤ï, ÏûÖÏãú, Ïú†Ìïô Îì± ÍµêÏú° Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 7,
    isActive: true,
  },
  {
    id: 8,
    slug: 'business',
    nameKo: 'ÏÇ¨ÏóÖÏÉÅÎã¥',
    nameEn: 'Business Consulting',
    icon: 'Briefcase',
    description: 'Ï∞ΩÏóÖ, Í≤ΩÏòÅ, ÎßàÏºÄÌåÖ Îì± ÏÇ¨ÏóÖ Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 8,
    isActive: true,
  },
  {
    id: 9,
    slug: 'design',
    nameKo: 'ÎîîÏûêÏù∏ÏÉÅÎã¥',
    nameEn: 'Design Consultation',
    icon: 'Palette',
    description: 'UI/UX, Í∑∏ÎûòÌîΩ ÎîîÏûêÏù∏ Îì± ÎîîÏûêÏù∏ Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 9,
    isActive: true,
  },
  {
    id: 10,
    slug: 'language',
    nameKo: 'Ïñ∏Ïñ¥ÏÉÅÎã¥',
    nameEn: 'Language Learning',
    icon: 'Languages',
    description: 'Ïô∏Íµ≠Ïñ¥ ÌïôÏäµ, Î≤àÏó≠ Îì± Ïñ∏Ïñ¥ Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 10,
    isActive: true,
  },
  {
    id: 11,
    slug: 'music',
    nameKo: 'ÏùåÏïÖÏÉÅÎã¥',
    nameEn: 'Music Instruction',
    icon: 'Music',
    description: 'ÏïÖÍ∏∞, ÏûëÍ≥°, ÏùåÏïÖ Ïù¥Î°† Îì± ÏùåÏïÖ Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 11,
    isActive: true,
  },
  {
    id: 12,
    slug: 'travel',
    nameKo: 'Ïó¨ÌñâÏÉÅÎã¥',
    nameEn: 'Travel Planning',
    icon: 'Plane',
    description: 'Ïó¨Ìñâ Í≥ÑÌöç, Í¥ÄÍ¥ëÏßÄ Ï∂îÏ≤ú Îì± Ïó¨Ìñâ Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 12,
    isActive: true,
  },
  {
    id: 13,
    slug: 'beauty',
    nameKo: 'ÎØ∏Ïö©ÏÉÅÎã¥',
    nameEn: 'Beauty Consultation',
    icon: 'Scissors',
    description: 'Ìó§Ïñ¥, Î©îÏù¥ÌÅ¨ÏóÖ, Ïä§ÌÉÄÏùºÎßÅ Îì± ÎØ∏Ïö© Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 13,
    isActive: true,
  },
  {
    id: 14,
    slug: 'sports',
    nameKo: 'Ïä§Ìè¨Ï∏†ÏÉÅÎã¥',
    nameEn: 'Sports Coaching',
    icon: 'Trophy',
    description: 'Ïö¥ÎèôÎ≤ï, Í≤ΩÍ∏∞ Ï†ÑÎûµ Îì± Ïä§Ìè¨Ï∏† Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 14,
    isActive: true,
  },
  {
    id: 15,
    slug: 'gardening',
    nameKo: 'ÏõêÏòàÏÉÅÎã¥',
    nameEn: 'Gardening Advice',
    icon: 'Sprout',
    description: 'ÏãùÎ¨º Ïû¨Î∞∞, Ï†ïÏõê Í∞ÄÍæ∏Í∏∞ Îì± ÏõêÏòà Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 15,
    isActive: true,
  },
  {
    id: 16,
    slug: 'investment',
    nameKo: 'Ìà¨ÏûêÏÉÅÎã¥',
    nameEn: 'Investment Advisory',
    icon: 'TrendingUp',
    description: 'Ï£ºÏãù, Î∂ÄÎèôÏÇ∞, ÏïîÌò∏ÌôîÌèê Îì± Ìà¨Ïûê Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 16,
    isActive: true,
  },
  {
    id: 17,
    slug: 'video',
    nameKo: 'ÏòÅÏÉÅÏÉÅÎã¥',
    nameEn: 'Video Production',
    icon: 'Video',
    description: 'ÏòÅÏÉÅ Ï†úÏûë, Ìé∏Ïßë, Ïú†ÌäúÎ∏å Îì± ÏòÅÏÉÅ Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 17,
    isActive: true,
  },
  {
    id: 18,
    slug: 'shopping',
    nameKo: 'ÏáºÌïëÏÉÅÎã¥',
    nameEn: 'Shopping Guide',
    icon: 'ShoppingBag',
    description: 'ÏÉÅÌíà Ï∂îÏ≤ú, Íµ¨Îß§ Í∞ÄÏù¥Îìú Îì± ÏáºÌïë Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 18,
    isActive: true,
  },
  {
    id: 19,
    slug: 'cooking',
    nameKo: 'ÏöîÎ¶¨ÏÉÅÎã¥',
    nameEn: 'Culinary Arts',
    icon: 'ChefHat',
    description: 'Î†àÏãúÌîº, ÏöîÎ¶¨Î≤ï, ÏãùÌíà ÏòÅÏñë Îì± ÏöîÎ¶¨ Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 19,
    isActive: true,
  },
  {
    id: 20,
    slug: 'pet-care',
    nameKo: 'Î∞òÎ†§ÎèôÎ¨ºÏÉÅÎã¥',
    nameEn: 'Pet Care',
    icon: 'PawPrint',
    description: 'Ìé´ÏºÄÏñ¥, ÌõàÎ†®, Í±¥Í∞ï Îì± Î∞òÎ†§ÎèôÎ¨º Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 20,
    isActive: true,
  },
  {
    id: 21,
    slug: 'real-estate',
    nameKo: 'Î∂ÄÎèôÏÇ∞ÏÉÅÎã¥',
    nameEn: 'Real Estate',
    icon: 'Building2',
    description: 'Îß§Îß§, ÏûÑÎåÄ, Ìà¨Ïûê Îì± Î∂ÄÎèôÏÇ∞ Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 21,
    isActive: true,
  },
  {
    id: 22,
    slug: 'study',
    nameKo: 'ÌïôÏäµÏÉÅÎã¥',
    nameEn: 'Study Methods',
    icon: 'GraduationCap',
    description: 'Í≥µÎ∂ÄÎ≤ï, ÏãúÌóò Ï§ÄÎπÑ, ÌïôÏäµ Í≥ÑÌöç Îì± ÌïôÏäµ Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 22,
    isActive: true,
  },
  {
    id: 23,
    slug: 'parenting',
    nameKo: 'Ïú°ÏïÑÏÉÅÎã¥',
    nameEn: 'Parenting',
    icon: 'Baby',
    description: 'Ïú°ÏïÑÎ≤ï, ÏïÑÏù¥ ÍµêÏú°, ÏñëÏú° Îì± Ïú°ÏïÑ Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 23,
    isActive: true,
  },
  {
    id: 24,
    slug: 'school',
    nameKo: 'ÌïôÍµêÏÉÅÎã¥',
    nameEn: 'School Counseling',
    icon: 'School',
    description: 'ÏûÖÌïô, Ï†ÑÌïô, ÌïôÍµê ÏÉùÌôú Îì± ÌïôÍµê Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 24,
    isActive: true,
  },
  {
    id: 25,
    slug: 'relationships',
    nameKo: 'Ïù∏Í∞ÑÍ¥ÄÍ≥ÑÏÉÅÎã¥',
    nameEn: 'Relationship Counseling',
    icon: 'Users',
    description: 'ÎåÄÏù∏Í¥ÄÍ≥Ñ, ÏÜåÌÜµ, Í∞àÎì± Ìï¥Í≤∞ Îì± Ïù∏Í∞ÑÍ¥ÄÍ≥Ñ Í¥ÄÎ†® ÏÉÅÎã¥',
    order: 25,
    isActive: true,
  },
  {
    id: 26,
    slug: 'others',
    nameKo: 'Í∏∞ÌÉÄ',
    nameEn: 'Others',
    icon: 'Star',
    description: 'Í∏∞ÌÉÄ ÏÉÅÎã¥ Î∂ÑÏïº',
    order: 26,
    isActive: true,
  },
];

async function updateCategories() {
  console.log('üîÑ Updating Category table with icon names...\n');

  // Get existing categories to check which are currently in use
  const existingCategories = await prisma.category.findMany();
  const existingSlugs = new Set(existingCategories.map(cat => cat.slug));

  console.log(`üìä Current categories in database: ${existingCategories.length}`);
  console.log(`üìã Categories to insert/update: ${categoryData.length}\n`);

  let updatedCount = 0;
  let createdCount = 0;

  for (const category of categoryData) {
    try {
      const { id, ...categoryWithoutId } = category;

      const result = await prisma.category.upsert({
        where: { slug: category.slug },
        update: {
          nameKo: category.nameKo,
          nameEn: category.nameEn,
          icon: category.icon,
          description: category.description,
          order: category.order,
          isActive: category.isActive,
        },
        create: categoryWithoutId,
      });

      if (existingSlugs.has(category.slug)) {
        console.log(`‚úÖ Updated: ${category.nameKo} (${category.slug}) - Icon: ${category.icon}`);
        updatedCount++;
      } else {
        console.log(`üÜï Created: ${category.nameKo} (${category.slug}) - Icon: ${category.icon}`);
        createdCount++;
      }
    } catch (error) {
      console.log(`‚ùå Error processing category ${category.slug}:`, error);
    }
  }

  console.log(`\n‚úÖ Category update completed!`);
  console.log(`   Updated: ${updatedCount} categories`);
  console.log(`   Created: ${createdCount} categories`);
  console.log(`   Total: ${updatedCount + createdCount} categories\n`);
}

async function validateExpertCategoryLinks() {
  console.log('üîç Validating Expert-Category links...\n');

  // Get all experts with their categories
  const experts = await prisma.expert.findMany({
    select: {
      id: true,
      name: true,
      categories: true,
      categoryLinks: {
        include: {
          category: true,
        },
      },
    },
  });

  // Get all categories
  const categories = await prisma.category.findMany();
  const categoryMap = new Map(categories.map(cat => [cat.slug, cat]));

  console.log('üìä Expert-Category Link Status:\n');

  let validLinks = 0;
  let missingLinks = 0;
  let invalidCategoryRefs = 0;

  for (const expert of experts) {
    const expertCategories = Array.isArray(expert.categories) ? expert.categories : [];
    const linkedCategories = new Set(expert.categoryLinks.map(link => link.category.slug));

    // Check for missing links
    const missingCats = expertCategories.filter(slug => !linkedCategories.has(slug));

    // Check for invalid category references
    const invalidCats = expertCategories.filter(slug => !categoryMap.has(slug));

    if (missingCats.length > 0 || invalidCats.length > 0) {
      console.log(`‚ö†Ô∏è  Expert "${expert.name}":`);

      if (invalidCats.length > 0) {
        console.log(`   ‚ùå Invalid category references: ${invalidCats.join(', ')}`);
        invalidCategoryRefs += invalidCats.length;
      }

      if (missingCats.length > 0) {
        console.log(`   ‚ö†Ô∏è  Missing junction links: ${missingCats.join(', ')}`);
        missingLinks += missingCats.length;
      }
    } else {
      validLinks += expert.categoryLinks.length;
    }
  }

  console.log(`\nüìä Summary:`);
  console.log(`   ‚úÖ Valid links: ${validLinks}`);
  console.log(`   ‚ö†Ô∏è  Missing links: ${missingLinks}`);
  console.log(`   ‚ùå Invalid category references: ${invalidCategoryRefs}`);

  if (missingLinks === 0 && invalidCategoryRefs === 0) {
    console.log(`\n‚úÖ All Expert-Category links are valid!\n`);
  } else {
    console.log(`\n‚ö†Ô∏è  Some links need attention\n`);
  }

  return { validLinks, missingLinks, invalidCategoryRefs };
}

async function displayCategoryUsageStatistics() {
  console.log('üìä Category Usage Statistics:\n');

  const categories = await prisma.category.findMany({
    include: {
      _count: {
        select: {
          expertLinks: true,
          communityPosts: true,
        },
      },
    },
    orderBy: { order: 'asc' },
  });

  console.log('Category Distribution:');
  console.log('‚îÄ'.repeat(80));
  console.log(`${'Category'.padEnd(25)} ${'Slug'.padEnd(20)} ${'Icon'.padEnd(15)} ${'Experts'.padEnd(10)} Posts`);
  console.log('‚îÄ'.repeat(80));

  let categoriesWithExperts = 0;
  let categoriesWithPosts = 0;
  let totalExpertLinks = 0;
  let totalPosts = 0;

  categories.forEach(cat => {
    const expertCount = cat._count.expertLinks;
    const postCount = cat._count.communityPosts;

    if (expertCount > 0) categoriesWithExperts++;
    if (postCount > 0) categoriesWithPosts++;
    totalExpertLinks += expertCount;
    totalPosts += postCount;

    const status = expertCount > 0 ? '‚úÖ' : '  ';
    console.log(
      `${status} ${cat.nameKo.padEnd(23)} ${cat.slug.padEnd(20)} ${cat.icon.padEnd(15)} ${expertCount.toString().padStart(7)}    ${postCount}`
    );
  });

  console.log('‚îÄ'.repeat(80));
  console.log(`\nüìà Summary:`);
  console.log(`   Total categories: ${categories.length}`);
  console.log(`   Categories with experts: ${categoriesWithExperts}`);
  console.log(`   Categories with posts: ${categoriesWithPosts}`);
  console.log(`   Total expert-category links: ${totalExpertLinks}`);
  console.log(`   Total community posts: ${totalPosts}`);
  console.log();
}

async function main() {
  console.log('üöÄ Starting Category Update with Icon Names\n');
  console.log('='.repeat(80) + '\n');

  try {
    // Step 1: Update categories
    await updateCategories();

    // Step 2: Validate expert-category links
    const validation = await validateExpertCategoryLinks();

    // Step 3: Display usage statistics
    await displayCategoryUsageStatistics();

    console.log('='.repeat(80));
    if (validation.missingLinks === 0 && validation.invalidCategoryRefs === 0) {
      console.log('‚úÖ Category update completed successfully with perfect data consistency!');
    } else {
      console.log('‚ö†Ô∏è  Category update completed but some links need review');
    }
    console.log('='.repeat(80));
  } catch (error) {
    console.error('‚ùå Error during category update:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

main()
  .catch((error) => {
    console.error('Fatal error:', error);
    process.exit(1);
  });