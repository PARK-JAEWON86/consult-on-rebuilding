generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  name            String?
  passwordHash    String?
  provider        String    @default("local") // "local", "google"
  providerId      String?   // Google ID 등 외부 제공자 고유 ID
  avatarUrl       String?   // OAuth에서 받은 프로필 이미지
  emailVerifiedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  emailVerifications EmailVerification[]

  @@unique([provider, providerId])
}

model Expert {
  id          Int       @id @default(autoincrement())
  displayId   String    @unique            // 외부 노출 ID (ulid)
  name        String
  title       String?
  categories  Json      // 카테고리 태그 (예: ["law","tax"]) - TODO: N:N 관계로 이관 예정
  bio         String?
  avatarUrl   String?
  ratingAvg   Float     @default(0)
  reviewCount Int       @default(0)
  ratePerMin  Int       @default(1000)     // 분당 단가 (기본 1000원)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // N:N 카테고리 관계
  categoryLinks ExpertCategory[]
}

// 카테고리 테이블
model Category {
  id          Int       @id @default(autoincrement())
  slug        String    @unique     // 영문/슬러그 (e.g. "tax", "labor-law")
  nameKo      String                 // 한국어 표시명
  nameEn      String?                // 선택: 국제화 대비
  icon        String?                // lucide 아이콘 키 (e.g. "Scale", "Briefcase")
  description String?                // 짧은 설명
  order       Int       @default(0)  // 정렬 우선순위 (작을수록 위)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  expertLinks ExpertCategory[]
}

// 전문가–카테고리 N:N
model ExpertCategory {
  expertId   Int
  categoryId Int
  assignedAt DateTime @default(now())

  expert   Expert   @relation(fields: [expertId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([expertId, categoryId])
}

model Reservation {
  id         Int      @id @default(autoincrement())
  displayId  String   @unique
  userId     Int
  expertId   Int
  startAt    DateTime       // ISO (UTC)
  endAt      DateTime       // ISO (UTC)
  status     ReservationStatus @default(PENDING)
  cost       Int      @default(0)       // 예약 비용
  note       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([expertId, startAt]) // 동일 전문가 같은 시작시각 중복 방지
  @@index([userId, createdAt])

  // (옵션) 릴레이션은 후속 단계에서 필요 시 추가
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELED
}

model PaymentIntent {
  id           Int       @id @default(autoincrement())
  displayId    String    @unique
  userId       Int
  amount       Int       // 결제 금액(원)
  currency     String    @default("KRW")
  status       PaymentStatus @default(PENDING) // PENDING, SUCCEEDED, FAILED, CANCELED
  provider     String    @default("toss")
  providerKey  String?   @unique // toss paymentKey 등 외부 식별자
  metadata     Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
}

model CreditTransaction {
  id           Int       @id @default(autoincrement())
  userId       Int
  amount       Int       // + 충전, - 사용
  reason       String    // "charge:toss", "use:reservation", etc
  refId        String?   // 연관 엔티티 displayId 등
  createdAt    DateTime  @default(now())

  @@unique([userId, reason, refId])
  @@index([userId, createdAt])
}

model Session {
  id            Int           @id @default(autoincrement())
  displayId     String        @unique
  reservationId Int
  channel       String        @unique        // Agora 채널명
  status        SessionStatus @default(SCHEDULED) // SCHEDULED | LIVE | ENDED
  startedAt     DateTime?
  endedAt       DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  notes         SessionNote[]
}

enum SessionStatus {
  SCHEDULED
  LIVE
  ENDED
}

// 세션 노트 (유저별 개인 메모)
model SessionNote {
  id          Int       @id @default(autoincrement())
  sessionId   Int
  userId      Int
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  session     Session   @relation(fields: [sessionId], references: [id])

  @@unique([sessionId, userId])
}

// 후기 (예약 1건당 1개)
model Review {
  id            Int       @id @default(autoincrement())
  displayId     String    @unique
  userId        Int
  expertId      Int
  reservationId Int       @unique
  rating        Int
  content       String
  isPublic      Boolean   @default(true)
  createdAt     DateTime  @default(now())

  // (선택) relation 정의는 나중에
}

// 전문가 신청
model ExpertApplication {
  id              Int                    @id @default(autoincrement())
  displayId       String                 @unique
  userId          Int
  name            String
  email           String
  jobTitle        String?
  specialty       String
  experienceYears Int                    @default(0)
  bio             String
  keywords        Json                   // 상담 주제 키워드 배열
  consultationTypes Json                // 상담 유형 배열 ["video", "chat", "voice"]
  availability    Json                   // 일정 정보
  certifications  Json                   // 자격증 정보
  profileImage    String?
  status          ExpertApplicationStatus @default(PENDING)
  reviewedAt      DateTime?
  reviewedBy      Int?                   // 관리자 ID
  reviewNotes     String?                // 검수 메모
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt

  @@index([userId, status])
  @@index([status, createdAt])
}

enum ExpertApplicationStatus {
  PENDING   // 검수 대기
  APPROVED  // 승인
  REJECTED  // 거부
}

model EmailVerification {
  id           Int       @id @default(autoincrement())
  userId       Int
  codeHash     String    // raw code 저장 금지: SHA-256
  expiresAt    DateTime
  consumedAt   DateTime?
  createdAt    DateTime  @default(now())
  attempts     Int       @default(0)
  lastSentAt   DateTime  @default(now())

  user         User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
}

